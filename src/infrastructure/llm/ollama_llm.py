from __future__ import annotations

import requests

from src.domain.ports.llm_classifier import LLMClassifier
from src.logger_config import get_logger


logger = get_logger(__name__)


class OllamaLLM(LLMClassifier):
    def __init__(self, api_url: str, model: str) -> None:
        self._api_url = api_url.rstrip("/")
        self._model = model

    def _post_prompt(self, prompt: str) -> str:
        resp = requests.post(self._api_url, json={
            "model": self._model,
            "prompt": prompt,
            "temperature": 0.1,
            "stream": False,
        })
        logger.info(f"Request_ to {self._model}, status {resp.status_code}")
        if not resp.ok:
            raise RuntimeError(f"API error {resp.status_code}")
        return resp.json().get("response", "").strip()

    def classify_document(self, easy_text: str, tess_text: str) -> str:
        prompt = (
            "Ты — эксперт по бухгалтерским документам. "
            "Тебе дана **первая страница** документа, распознанная двумя OCR-системами (EasyOCR и Tesseract).\n\n"
            "Твоя задача — определить **тип документа** на основе его заголовка, ключевых фраз и структуры.\n\n"
            "Выбери один из следующих вариантов: **Счет, Счет-фактура, УПД, Договор, Акт**.\n\n"
            "Используй следующие правила:\n"
            "- Если встречается фраза **'Счет на оплату'** или **'Счет за услуги'**, это **Счет**\n"
            "- Если встречается **'Счет-фактура'** — это **Счет-фактура**\n"
            "- Если есть слово **'Договор'** в заголовке или первых строках — это **Договор**\n"
            "- Если есть слово **'Акт'** и также слова **'работ'** или **'услуг'** — это **Акт**\n"
            "- Если явно указано **'Универсальный передаточный документ'** — это **УПД**\n\n"
            "Если не уверен — **всё равно выбери наиболее вероятный тип, к которому ты склоняешься хотя бы на 60%**. "
            "Никогда не говори 'не знаю' или 'неопределено'.\n\n"
            "=== OCR EasyOCR ===\n"
            f"{easy_text}\n\n"
            "=== OCR Tesseract ===\n"
            f"{tess_text}\n\n"
            "Ответь строго одним словом: Счет, Счет-фактура, УПД, Договор или Акт. Никаких пояснений."
        )
        out = self._post_prompt(prompt)
        return out.splitlines()[-1].strip()

    def extract_number_date(self, doc_type: str, easy_text: str, tess_text: str) -> str:
        prompt = (
            "Ты — эксперт по юридическим документам.\n"
            f"Тип документа: {doc_type}\n\n"
            "Даны два OCR-текста первой страницы:\n"
            f"- EasyOCR:\n{easy_text}\n\n"
            f"- Tesseract:\n{tess_text}\n\n"
            "Найди и выведи строго две строки без лишнего текста:\n"
            "номер: <значение документа>\n"
            "дата: <дд месяц гггг>"
        )
        return self._post_prompt(prompt)

    def extract_counterparties(self, doc_type: str, easy_text: str, tess_text: str) -> str:
        prompt = (
            "Ты — эксперт по юридическим документам.\n"
            f"Тип документа: {doc_type}\n\n"
            "Даны два OCR-текста первой страницы:\n"
            f"- EasyOCR:\n{easy_text}\n\n"
            f"- Tesseract:\n{tess_text}\n\n"
            "Найди и выведи строго две строки без рассуждений:\n"
            "заказчик: <наименование заказчика>\n"
            "исполнитель: <наименование исполнителя>"
        )
        return self._post_prompt(prompt)

    def extract_requisites(self, parties_block: str, full_easy: str, full_tess: str) -> str:
        prompt = (
            "Ты — эксперт по российским юридическим и бухгалтерским документам.\n\n"
            "Твоя задача — извлечь **ИНН**, **КПП** и **адрес** для двух сторон:\n"
            "- заказчика (покупатель, клиент, получатель)\n"
            "- исполнителя (поставщик, продавец, подрядчик)\n\n"
            " Форматы и правила для ИНН/КПП:\n"
            "- ИНН юр.лица: строго 10 цифр\n"
            "- ИНН физ.лица или ИП: строго 12 цифр\n"
            "- КПП: строго 9 цифр\n"
            "- Не путай с ОГРН, БИК, р/с, к/с, т.к. они выглядят похоже\n"
            "- Если у ИП указан только ИНН — это нормально (КПП у ИП нет)\n"
            "- Адрес — это строка с улицей, домом и городом (не путай с email/банками)\n"
            "- У заказчика и исполнителя **разные** ИНН и адреса\n\n"
            " Подсказка: в конце документа часто есть раздел с реквизитами.\n"
            "Также полезна информация, извлечённая ранее:\n"
            f"{parties_block}\n\n"
            " Данные из OCR для всего документа:\n"
            "--- EasyOCR ---\n"
            f"{full_easy}\n\n"
            "--- Tesseract ---\n"
            f"{full_tess}\n\n"
            " Думай пошагово:\n"
            "1. Найди строки с 'ИНН', 'КПП', 'адрес'\n"
            "2. Проверяй корректность цифр (ИНН 10 или 12, КПП 9)\n"
            "3. Определи к какой стороне они относятся (по названию организации или порядку)\n"
            "4. Убедись, что ИНН и адрес заказчика ≠ исполнителя\n\n"
            " Выведи строго шесть строк, вот в таком формате:\n"
            "заказчик_inn: <10 или 12 цифр или <не найдено>>\n"
            "заказчик_kpp: <9 цифр или <не найдено>>\n"
            "заказчик_address: <адрес или <не найдено>>\n"
            "исполнитель_inn: <10 или 12 цифр или <не найдено>>\n"
            "исполнитель_kpp: <9 цифр или <не найдено>>\n"
            "исполнитель_address: <адрес или <не найдено>>\n\n"
            "Не добавляй пояснений, комментариев, ничего лишнего. Только указанные шесть строк."
        )
        return self._post_prompt(prompt)


